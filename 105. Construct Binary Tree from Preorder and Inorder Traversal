/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include <unordered_map>

class Solution {
public:
    unordered_map<int, int> TreeMap;
    int pre_idx = 0;

    TreeNode* Find(vector<int>& preorder, int in_left, int in_right){
        if(in_left>in_right){
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[pre_idx]);
        int mid = TreeMap[preorder[pre_idx]];
        pre_idx++;

        root->left = Find(preorder, in_left, mid-1);
        root->right = Find(preorder, mid+1, in_right);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int len = inorder.size();
        for(int i=0;i<len;i++){
            TreeMap[inorder[i]]=i;
        }
        return Find(preorder,0,len-1);
        
    }
};
